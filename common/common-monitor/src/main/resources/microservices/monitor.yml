# actuator
management:
  # endpoints配置
  # 要特别注意暴露的URL的安全性，例如，/actuator/env可以获取当前机器的所有环境变量，不可暴露给公网。
  # 这些 Actuator 模块本来就有的端点我们称之为原生端点。根据端点的作用的话，我们大概可以分为三大类：
  # 1、应用配置类：获取应用程序中加载的应用配置、环境变量、自动化配置报告等与Spring Boot应用密切相关的配置类信息。
  # 2、度量指标类：获取应用程序运行过程中用于监控的度量指标，比如：内存信息、线程池信息、HTTP请求统计等。
  # 3、操作控制类：提供了对应用的关闭等操作类功能。
  endpoints:
    # web
    web:
      # Actuator默认所有的监控点路径都在 /actuator/*，如果有需要这个路径也支持定制。
      #base-path: /actuator
      base-path: ${microservices.core.monitor.base-path}
      exposure:
        # 端点暴露配置
        #include: info, health, beans, env, metrics
        include: '*'

    jmx:
      exposure:
        include: '*'
        #exclude:

  # 对具体端点配置
  endpoint:
    # health端点提供了关于应用健康情况的一些基础信息
    health:
      enabled: true
      # never: 不展示详细信息，up或者down的状态，默认配置
      # when-authorized: 详细信息将会展示给通过认证的用户。授权的角色可以通过management.endpoint.health.roles配置
      # always: 对所有用户暴露详细信息
      show-details: always

    # beans端点会返回Spring容器中所有bean的别名、类型、是否单例、依赖等信息。
    beans:
      enabled: true

    # metrics端点用来返回当前应用的各类重要度量指标，比如：内存信息、线程信息、垃圾回收信息、tomcat、数据库连接池等。
    metrics:
      enabled: true

    # loggers端点暴露程序内部配置的所有logger的信息
    # 通过loggers端点可改变运行时的日志等级，POST /actuator/loggers/root body: { "configuredLevel": "DEBUG" }，如果想重置成默认值，把configuredLevel改成 null

    # info端点可以用来展示程序的基础信息，可以按照需求在配置文件中个性化配置（默认情况下，该端点只会返回一个空的json内容）

    # heapdump端点。
    # 访问 /actuator/heapdump 会自动生成一个JVM的堆文件heapdump，可以使用VisualVM、JProfiler监控工具打开此文件查看内存快照。

    # threaddump端点主要展示了线程名、线程ID、线程的状态、是否等待锁资源、线程堆栈等信息。

    # shutdown端点属于操作控制类端点，可以优雅关闭SpringBoot应用。要使用这个功能首先需要在配置文件中开启：
    shutdown:
      enabled: true

    # prometheus端点
    prometheus:
      enabled: true

#
logging:
  file:
    name: logs/${spring.application.name}/info.log

#
info:
  name: ${spring.application.name}
  port: ${server.port}
  version: ${microservices.application.version}
  active: ${spring.profiles.active}
